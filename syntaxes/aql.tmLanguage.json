{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "_reference": "https://raw.githubusercontent.com/arangodb/arangodb/master/js/apps/system/_admin/aardvark/APP/frontend/src/mode-aql.js",
  "name": "AQL (ArangoDB Query Language)",
  "patterns": [
    {
      "include": "#constant"
    },
    {
      "include": "#number"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#function"
    },
    {
      "include": "#string"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#punctuations"
    }
  ],
  "repository": {
    "constant": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.aql",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "constant.language.boolean.false.aql",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "name": "constant.language.null.aql",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "match": "!|[!<>]?(=|~)|<>|<|>|~",
          "name": "keyword.operator.comparison.aql"
        },
        {
          "match": "\\-|\\+|\\*|\\%|((?<=[^\\/])(?<=[^\\*]))\\/(?=[^\\/])(?=[^\\*])",
          "name": "keyword.operator.arithmetic.aql"
        },
        {
          "match": "\\|\\|",
          "name": "keyword.operator.or.aql"
        },
        {
          "match": "\\&\\&",
          "name": "keyword.operator.and.aql"
        },
        {
          "begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary.aql"
            }
          },
          "end": "\\s*(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary.aql"
            }
          },
          "patterns": [
            {
              "include": "#constant"
            },
            {
              "include": "#number"
            },
            {
              "include": "#keyword"
            },
            {
              "include": "#function"
            },
            {
              "include": "#string"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#punctuations"
            }
          ]
        }
      ]
    },
    "number": {
      "match": "\\b\\d+\\b",
      "name": "constant.numeric.aql"
    },
    "keyword": {
      "patterns": [
        {
          "match": "(?i)\\b(FOR|RETURN|FILTER|SEARCH|SORT|LIMIT|LET|COLLECT|ASC|DESC|IN|INTO|INSERT|UPDATE|REMOVE|REPLACE|UPSERT|OPTIONS|WITH|AND|OR|NOT|DISTINCT|GRAPH|SHORTEST_PATH|OUTBOUND|INBOUND|ANY|ALL|NONE|AGGREGATE|LIKE|K_SHORTEST_PATHS|K_PATHS|PRUNE|WINDOW)\\b",
          "name": "keyword.control.aql"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "match": "(?i)\\b(TOKENS|OFFSET_INFO|STARTS_WITH|EXISTS|WITHIN|CHECK_DOCUMENT|CURRENT_USER|COLLECTIONS|CALL_GREENSPUN|V8|IS_SAME_COLLECTION|PARSE_IDENTIFIER|FIRST_DOCUMENT|FIRST_LIST|DATE_TIMEZONES|DATE_TIMEZONE|DATE_TRUNC|DATE_DAYS_IN_MONTH|DATE_LEAPYEAR|DATE_SUBTRACT|DATE_ISOWEEK|DATE_MILLISECOND|DATE_SECOND|DATE_MINUTE|DATE_MONTH|DATE_DAYOFWEEK|DATE_ISO8601|DATE_TIMESTAMP|GEO_MULTILINESTRING|BOOST|DATE_DAYOFYEAR|GEO_LINESTRING|GEO_POLYGON|GEO_MULTIPOINT|GEO_IN_RANGE|GEO_DISTANCE|IS_IN_POLYGON|DISTANCE|DOCUMENT|JSON_PARSE|ZIP|KEEP_RECURSIVE|KEEP|UNSET_RECURSIVE|COLLECTION_COUNT|GEO_EQUALS|MATCHES|MERGE_RECURSIVE|VALUE|VERSION|VALUES|APPLY|CALL|DATE_ROUND|L2_DISTANCE|ASSERT|DATE_FORMAT|L1_DISTANCE|DATE_LOCALTOUTC|COSINE_SIMILARITY|MINHASH|DECAY_GAUSS|INTERLEAVE|REPLACE_NTH|REMOVE_NTH|BOOSTSCORE|ANALYZER|REMOVE_VALUES|UNSHIFT|POP|PUSH|CONTAINS_ARRAY|NTH|FULLTEXT|WITHIN_RECTANGLE|DATE_QUARTER|LAST|FIRST|NGRAM_SIMILARITY|FNV64|AVERAGE|JSON_STRINGIFY|NGRAM_MATCH|ENCODE_URI_COMPONENT|DATE_DIFF|REMOVE_VALUE|IPV4_FROM_NUMBER|NOT_NULL|NGRAM_POSITIONAL_SIMILARITY|LEVENSHTEIN_DISTANCE|APPEND|SHA1|SPLIT|REGEX_REPLACE|DATE_DAY|LEFT|SUBSTITUTE|IS_ARRAY|FIND_LAST|TYPENAME|IS_LIST|TO_LIST|HASH|DEGREES|RANDOM_TOKEN|LTRIM|STDDEV|GEO_POINT|CRC32|DECAY_EXP|IS_OBJECT|MINHASH_MATCH|REGEX_TEST|IS_IPV4|GEO_MULTIPOLYGON|IS_DOCUMENT|POSITION|IS_NUMBER|POW|NOEVAL|LEVENSHTEIN_MATCH|GEO_CONTAINS|TO_HEX|IS_BOOL|TO_BOOL|TO_BASE64|UNION_DISTINCT|COUNT_DISTINCT|SHARD_ID|PASSTHRU|MERGE|IS_NULL|DECAY_LINEAR|IN_RANGE|TRANSLATE|RADIANS|UPPER|REGEX_SPLIT|SCHEMA_VALIDATE|LOWER|MD5|DATE_COMPARE|CHAR_LENGTH|TAN|BIT_TO_STRING|TO_ARRAY|SLEEP|SCHEMA_GET|DECODE_REV|TO_STRING|MAX|IS_DATESTRING|CONCAT|DATE_HOUR|TO_NUMBER|FIND_FIRST|TFIDF|VARIANCE_SAMPLE|RIGHT|CONTAINS|SUBSTRING_BYTES|RTRIM|TRIM|SUBSTRING|UUID|EXP2|FLOOR|PREGEL_RESULT|DATE_UTCTOLOCAL|ATTRIBUTES|MEDIAN|CEIL|ROUND|MIN|ABS|BIT_XOR|STDDEV_SAMPLE|CONCAT_SEPARATOR|SQRT|GEO_INTERSECTS|BIT_SHIFT_RIGHT|BIT_FROM_STRING|LOG|SHIFT|RAND|RANGE|LOG10|EXP|COS|ASIN|IS_STRING|ACOS|BM25|KEYS|COUNT_UNIQUE|DATE_ADD|ATAN|REVERSE|ATAN2|IPV4_TO_NUMBER|SOUNDEX|PI|NEAR|AVG|SORTED|BIT_AND|LOG2|FLATTEN|FAIL|BIT_OR|HAS|BIT_NEGATE|MIN_MATCH|NOOPT|BIT_TEST|SLICE|WARN|SHA512|BIT_SHIFT_LEFT|PHRASE|BIT_CONSTRUCT|BIT_DECONSTRUCT|DATE_YEAR|MINHASH_ERROR|REGEX_MATCHES|MINHASH_COUNT|UNION|MINUS|VARIANCE_POPULATION|OUTERSECTION|DATE_NOW|JACCARD|IS_KEY|LENGTH|CURRENT_DATABASE|COUNT|UNSET|SUM|PERCENTILE|INTERSECTION|SIN|VARIANCE|LIKE|BIT_POPCOUNT|STDDEV_POPULATION|PRODUCT|UNIQUE|GEO_AREA|SORTED_UNIQUE)\\b",
          "name": "support.function.aql"
        }
      ]
    },
    "string": {
      "patterns": [
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.aql"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.aql"
            }
          },
          "name": "string.quoted.single.aql",
          "patterns": [
            {
              "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.aql"
            },
            {
              "match": "[^']*[^\\n\\r'\\\\]$",
              "name": "invalid.illegal.string.aql"
            }
          ]
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.aql"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.aql"
            }
          },
          "name": "string.quoted.double.aql",
          "patterns": [
            {
              "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.aql"
            },
            {
              "match": "[^\"]*[^\\n\\r\"\\\\]$",
              "name": "invalid.illegal.string.aql"
            }
          ]
        },
        {
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.aql"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.aql"
            }
          },
          "name": "string.quoted.template.aql",
          "patterns": [
            {
              "match": "\\\\(x\\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
              "name": "constant.character.escape.aql"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "//.*",
          "name": "comment.line.double-slash.aql"
        },
        {
          "begin": "/\\*\\*(?!/)",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.aql"
            }
          },
          "end": "\\*/",
          "name": "comment.block.documentation.aql"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.aql"
            }
          },
          "end": "\\*/",
          "name": "comment.block.aql"
        }
      ]
    },
    "punctuations": {
      "patterns": [
        {
          "match": "\\{|\\}|\\(|\\)|\\[|\\]",
          "name": "punctuation.definition.block.aql"
        },
        {
          "match": "\\,|\\.|\\:",
          "name": "punctuation.separator.block.aql"
        }
      ]
    }
  },
  "scopeName": "source.aql"
}